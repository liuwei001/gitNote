git 参考手册：http://gitref.org/zh/remotes/

1、克隆项目 git clone https://github.com/liuwei001/gitdemo.git
   git clone -b <branch> <remote_repo> #clone某个分支

2、添加文件到缓存：git add readme.txt
3、查看修改状态：  git status
  git status -s  #简易版本 
  git status readme.txt
4、比较内容： git diff
   git diff --cached #查看已缓存的改动
   git diff HEAD 查看已缓存的与未缓存的所有改动
   git diff --stat 显示摘要而非整个 diff
   git diff origin/master master （show me the changes between the remote master branch and my master branch).
                              需要注意的是，remotes/origin/master和origin/master的指向是相同的
   

5、提交内容: git commit
   git commit -am "提交描述" #自动将在提交前将已记录、修改的文件放入缓存区
6、取消已缓存内容：git reset
   git reset HEAD -- readme.txt  #HEAD是缓存版本号
   git reset 74e3bde35570573cd31368cd6bd4feafe5addd68 -- readme.txt
7、放弃修改内容：git checkout
   git checkout readme.txt
8、查看历史版本的内容: git show
   git show 74e3bde35570573cd31368cd6bd4feafe5addd68 -- readme.txt
   git show 74e3bde35570573cd31368cd6bd4feafe5addd68:src/com/gitdemo/test/readme.txt
9、查看提交日志：git log
   git log readme.txt
   git log --pretty=oneline readme.txt  #查看readme.txt文件的历史变动，简易版本
   git log --author #只寻找某个特定作者的提交'
   git log --grep 根据提交注释过滤提交记录
   git log --oneline --graph 拓扑图形式显示日志
   git log --oneline --decorate --graph 可以查看标签
10、查看分支：git branch
    git branch (branchname) #创建分支
    git checkout -b (branchname) #创建新分支，并立即切换到它
    git checkout -b (branchname) origin #远程分支
    git branch -d (branchname) #删除分支
   错误的： git branch -r -d origin/branch-name #只能删除本地对该远程的track
   正确的： git push origin :branch-name #冒号前面的空格不能少，原理是把一个空分支push到server上，相当于删除该分支。
   git branch -m <old_branch_name> <new_branch_name>  重命名
11、内容合并：git merge
    git merge --no-ff branch1 #合并branch1分支的数据 (--no-ff ：no fast-forward merge,在分支上生成一个新节点。为了保证版本演进的清晰)
12、远程： git remote
    git remote -v # 列出远程别名
    git remote add github git@github.com:schacon/hw.git #添加远程
    git remote rm github #删除远程
13、远程数据获取: git fetch
    git fetch origin #从远端仓库下载新分支与数据
    git pull origin #相当于git fetch之后git merge合并

git fetch origin master
git log -p master..origin/master
git merge origin/master

 以上命令的含义：
   首先从远程的origin的master主分支下载最新的版本到origin/master分支上
   然后比较本地的master分支和origin/master分支的差别
   最后进行合并
   上述过程其实可以用以下更清晰的方式来进行：
 git fetch origin master:tmp
git diff tmp 
git merge tmp

    从远程获取最新的版本到本地的test分支上
   之后再进行比较合

#更新某一个文件
git fetch
git checkout origin/master -- path/to/file

14、远程数据推送：git push
    git push -u origin master #推送你的master分支与数据到远端仓库
    git push origin master （省略了<dst>，等价于“git push origin master:master”）
    git push origin branch1 #推送分支到远程
    git push origin :branch1 （再origin repository里面查找branch1，删除它。用一个空的去更新它，就相当于删除了）
15、打标签：git tag
    git tag -a v1.0 -m 'my version 1.0' #标签+注释
    git push origin [tagname] #将标签推送之远程
    git push origin --tags #一次性将所有标签推送至远程
16、git clone svn
    git svn clone svn://srvhost/proj -T trunk -t tags -b branches
    git svn clone file:///tmp/test-svn -s 

17、git commit --amend 修改最后一次提交de 注释
    修改以前提交的记录：
      git rebase -i HEAD~3
       表示要修改当前版本的倒数第三次状态。
        这个命令出来之后，会出来三行东东：
        pick:*******
        pick:*******
        pick:*******
        如果你要修改哪个，就把那行的pick改成edit，然后退出。
 
        这时通过git log你可以发现，git的最后一次提交已经变成你选的那个了，这时再使用：
        git commit --amend
        来对commit进行修改。
        修改完了之后，要回来对不对？
        使用git rebase --continue
18、配置一些git的常用命令alias
 	git config --system alias.st status     #git st
 	git config --system alias.ci commit   #git commit
 	git config --system alias.co checkout  #git co
 	git config --system alias.br  branch  #git branch
  	git config --global push.default simple #默认git push命令，将推送当前分支至远程同名分支
19、3. 克隆 指定的远程分支
如果你渴望只克隆远程仓库的一个指定分支，而不是整个仓库分支，这对你帮助很大。
git init
git remote add -t BRANCH_NAME_HERE -f origin REMOTE_REPO_URL_PATH_HERE
git checkout BRANCH_NAME_HERE

20、 git查看某个文件修改历史
git blame filename.c 显示文件的每一行是在那个版本最后修改。
git whatchanged charge.lua 显示某个文件的每个版本提交信息：提交日期，提交人员，版本号，提交备注（没有修改细节）
git show 7aee80cd2afe3202143f379ec671917bc86f9771 显示某个版本的修改详情
和
git log -p 7aee80cd2afe3202143f379ec671917bc86f9771 
git log --pretty=oneline  显示每个版本都修改了那些文件
git log --pretty=oneline  charge.lua 与上一样，不过每个修改版本都包含了
git show 5aa1be6674ecf6c36a579521708bf6e5efb6795f charge.lua  显示某个版本的某个文件修改情况

21、忽略文件
 git config --global core.excludefile ~/.gitignore
 还有一种情况，就是已经commit了，再加入gitignore是无效的，所以需要删除下缓存
 git rm -r --cached ignore_file
注意： .gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。
    正确的做法是在每个clone下来的仓库中手动设置不要检查特定文件的更改情况。
    git update-index --assume-unchanged PATH    在PATH处输入要忽略的文件。